import React, { useState } from 'react';
import './App.css';

function App() {
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [storedUsername, setStoredUsername] = useState('');
  const [storedPassword, setStoredPassword] = useState('');
  const [message, setMessage] = useState('');
  const [isDarkMode, setIsDarkMode] = useState(false);
  const [selectedRoom, setSelectedRoom] = useState(null);
  const [isRegistering, setIsRegistering] = useState(false);
  const [users, setUsers] = useState([]); // ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£

  const [passwordVisible, setPasswordVisible] = useState(false);

  // Toggle dark mode
  const toggleDarkMode = () => {
    setIsDarkMode(!isDarkMode);
  };

  // Handle Login
  const handleLogin = () => {
    const user = users.find(user => user.username === username && user.password === password);
    if (user) {
      setIsLoggedIn(true);
      setMessage('');
    } else {
      setMessage('‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    }
  };

  // Handle Register
  const handleRegister = () => {
    if (!username || !password) {
      setMessage('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
      return;
    }

    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥
    const existingUser = users.find(user => user.username === username);
    if (existingUser) {
      setMessage('‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß');
      return;
    }

    // ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà
    const newUser = { username, password };
    setUsers([...users, newUser]);
    setIsRegistering(false); // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
    setMessage('‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ');
  };

  // Handle Room Select
  const handleRoomSelect = (room) => {
    setSelectedRoom(room);
    alert(`‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á: ${room}`);
  };

  const handleLogout = () => {
    setIsLoggedIn(false);
    setUsername('');
    setPassword('');
    setMessage('');
  };

  return (
    <div className={`App ${isDarkMode ? 'dark-mode' : ''}`}>
      <header className="App-header">
        <h1>‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</h1>
      </header>

      <aside className="theme-toggle-container">
        <button className="theme-toggle" onClick={toggleDarkMode}>
          ‡∏™‡∏•‡∏±‡∏ö‡∏ò‡∏µ‡∏°
        </button>
      </aside>

      <main>
        {!isLoggedIn ? (
          <div className="login-container">
            {!isRegistering ? (
              <>
                <h2>‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</h2>
                <input
                  type="text"
                  placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"
                  value={username}
                  onChange={(e) => setUsername(e.target.value)}
                />
                <div className="password-input-container">
                  <input
                    type={passwordVisible ? "text" : "password"}
                    placeholder="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                  />
                  <span className="password-toggle-icon" onClick={() => setPasswordVisible(!passwordVisible)}>
                    {passwordVisible ? "üëÅÔ∏è" : "üëÅÔ∏è‚Äçüó®Ô∏è"}
                  </span>
                </div>
                <button onClick={handleLogin}>‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</button>
                {message && <p>{message}</p>}
                <button onClick={() => setIsRegistering(true)}>‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</button>
              </>
            ) : (
              <>
                <h2>‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</h2>
                <input
                  type="text"
                  placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"
                  value={username}
                  onChange={(e) => setUsername(e.target.value)}
                />
                <div className="password-input-container">
                  <input
                    type={passwordVisible ? "text" : "password"}
                    placeholder="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                  />
                  <span className="password-toggle-icon" onClick={() => setPasswordVisible(!passwordVisible)}>
                    {passwordVisible ? "üëÅÔ∏è" : "üëÅÔ∏è‚Äçüó®Ô∏è"}
                  </span>
                </div>
                <button onClick={handleRegister}>‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</button>
                {message && <p>{message}</p>}
                <button onClick={() => setIsRegistering(false)}>‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</button>
              </>
            )}
          </div>
        ) : (
          <div className="logged-in">
            <h2>‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö, {username}</h2>
            <button onClick={handleLogout}>‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö</button>

            <div className="room-selection">
              <h3>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</h3>
              <div className="room-buttons">
                {['‡∏õ.1', '‡∏õ.2', '‡∏õ.3', '‡∏õ.4', '‡∏õ.5', '‡∏õ.6'].map((room, index) => (
                  <button
                    key={index}
                    className="room-button"
                    onClick={() => handleRoomSelect(room)}
                  >
                    {room}
                  </button>
                ))}
              </div>
            </div>
          </div>
        )}
      </main>

      <footer>
        <p>&copy; 2025 ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</p>
      </footer>
    </div>
  );
}

export default App;
